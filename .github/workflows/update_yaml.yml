name: GH-Actions-Basic

on:
  pull_request:
    types:
      - closed
    branches:
      - 'testmain'
  push:
    branches:
      - 'release/R*'
      - 'main'
  repository_dispatch:
    types:
      - some_event_01
      - some_event_02
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: Promote release to production env?
        required: true
        default: 'prod'
        options:
          - prod
env:
  DEPLOY_ENV: init
  IMAGE_TAG: abc

jobs:
  set-envs:
    runs-on: ubuntu-latest
    outputs:
      deploy_env: ${{ steps.set-deploy-env.outputs.deploy_env }}
    steps:
      - name: Parse Dispatch Event
        id: set-deploy-env
        run: |
          if [[ "${{ github.event.action }}"=='some_event_01' ]]; then
            echo "deploy_env=some_event_01" >> $GITHUB_OUTPUT
            echo "01 target env is ${{ steps.set-deploy-env.outputs.deploy_env }}"
            DEPLOY_ENV='some_event_01'
            echo "DEPLOY_ENV=${DEPLOY_ENV}" >> $GITHUB_ENV
            echo "set env is ${{ env.DEPLOY_ENV }}"
            echo "local env is ${DEPLOY_ENV}"
          elif [[ "${{ github.event.action }}"=='some_event_02' ]]; then
            echo "deploy_env=some_event_02" >> $GITHUB_OUTPUT
            echo "02 target env is ${{ steps.set-deploy-env.outputs.deploy_env }}"
            echo "local env is $deploy_env"
          else
            echo "deploy_env=dev" >> $GITHUB_OUTPUT
            echo "default target env is ${{ steps.set-deploy-env.outputs.deploy_env }}"
            echo "local env is $deploy_env"
          fi
      - name: Test env setup
        run: echo "set env is ${{ env.DEPLOY_ENV }}" 

  # set-envs:
  #   outputs:
  #     deploy-branch: ${{ steps.set-envs.outputs.deploy_branch }}
  #   runs-on: ubuntu-latest
  #   # if: ${{ github.event.inputs.env }} == 'test' 
  #   environment:
  #     name: env-01
  #   steps:
  #     - name: Check branch
  #       id: set-envs
  #       run: |
  #         if ${{ startsWith(github.ref, 'refs/heads/release/R') }}; then
  #           echo "deploy_branch=release" >> $GITHUB_OUTPUT
  #           echo "branch is ${{ github.ref }}"
  #         else
  #           echo "deploy_branch=main" >> $GITHUB_OUTPUT
  #           echo "main"
  #         fi
  #         echo "branch is ${{ github.ref }}"
  #         echo "ref_name is ${{ github.ref_name }}"
  #         echo "is merged? ${{github.event.pull_request.merged}}"
  #         echo "workflow dispatch name ${{ github.event.inputs.env }} "
          
  read-env-main:
    runs-on: ubuntu-latest
    needs: set-envs
    environment:
      name: env-01
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Read Env vars
        run: |
          echo "env vars: '${{ vars.ENV_ID }}'"
          echo "branch is ${{ needs.set-envs.outputs.deploy-branch }}"
          echo "evt name is ${{ github.event_name }}"
          echo "evt type is ${{ github.event.action }}"
          echo "target env is ${{ needs.set-envs.outputs.deploy_env }}"
          echo "check yq path"
          which yq
      # - name: Invoke Embedded Actions
      #   uses: ./.github/actions/echo
      #   with:
      #     var_01: "test---01"
      #     var_02: "test---02"
  
  read-env-release:
    runs-on: ubuntu-latest
    needs: set-envs
    environment:
      name: env-01
    if:  startsWith(github.ref, 'refs/heads/release/R')
    steps:
      - name: Read Env vars
        run: |
          echo "job is  read-env-release "
          echo "branch is ${{ needs.set-envs.outputs.deploy_env }}"
  
  react_dispatch_some_event_01:
    runs-on: ubuntu-latest
    needs: set-envs
    if: github.event.action == 'some_event_01'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/heads/main
      - name: Check inputs
        run: |
          echo "got input request some_event_01"
          echo "global env is ${{ env.DEPLOY_ENV }}"
          echo "target env is ${{ needs.set-envs.outputs.deploy_env }}"
          TARGET_ENV=${{ needs.set-envs.outputs.deploy_env }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          if [[ "$TARGET_ENV"=="some_event_01" ]]; then
            IMAGE_TAG=`yq '.images[0].newTag' stg-value.yaml`
          fi
          echo "image is $IMAGE_TAG"
          echo "env is $TARGET_ENV"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
      - name: Set Image tag
        run: |
          echo "image is ${{ env.IMAGE_TAG }}"
          TARGET_ENV=${{ needs.set-envs.outputs.deploy_env }}
          yq -i '.images[0].newTag = "${{ env.IMAGE_TAG }}"' ./$TARGET_ENV/version.yml
          cat ./$TARGET_ENV/version.yml

  react_dispatch_some_event_02:
    runs-on: ubuntu-latest
    needs: set-envs
    if: github.event.action == 'some_event_02'
    steps:
      - name: Check inputs
        run: |
          echo "got input request some_event_02"
          echo "target env is ${{ needs.set-envs.outputs.deploy_env }}"
          
  react_workflow_dispatch:
    runs-on: ubuntu-latest
    needs: set-envs
    if: github.event.inputs.env
    steps:
      - name: Check state
        run: echo "react_workflow_dispatc"